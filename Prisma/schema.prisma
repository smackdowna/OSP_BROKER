datasource db {
    provider = "mongodb"
    url      = env("db_url")
}

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["relationJoins"]
}


enum ROLE{
    USER
    ADMIN //handle the overall system 
    MODERATOR //handle the categories , flag content, ban users
    REPRESENTATIVE //can access business page.
    BUSINESS_ADMIN //verify representative
}

enum ContentType{
    TOPIC
    COMMENT
    POST
}

enum ReactionType{
    LIKE
    LOVE
    FUNNY
    WOW
    SAD
    ANGRY
}

model User{
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    fullName    String    
    email   String   @unique
    password String
    role    ROLE @default(USER)
    phone   String  @unique
    isBanned Boolean? @default(false)
    userProfile UserProfile? @relation("userToUserProfile")
    representative Representative? @relation("userToRepresentative")
    businessAdmin BusinessAdmin? @relation("userToBusinessAdmin")
    moderator Moderator? @relation("userToModerator")
    admin Admin? @relation("userToAdmin") 
    userMembership userMembership[] @relation("userToUserMembership")
    forum Forum[] @relation("userToForum")
    flaggedContent FlaggedContent[] @relation("userToFlaggedContent")
    businessPageFollower BusinessPageFollower[] @relation("userToBusinessPageFollower")
    representativePageFollower RepresentativePageFollower[] @relation("userToRepresentativePageFollower")
    groupMessage GroupMessage[] @relation("userToGroupMessage")
    booking Booking[] @relation("userToBooking")
    shreadPost SharedPost[] @relation("userToSharedPost")
    post Post[] @relation("userToPost")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// user model
model UserProfile {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  headLine String
  location String
  isVerified Boolean @default(false)
  isProfileComplete Boolean @default(false)
  about   String?
  profileImageUrl String?
  education Education[]  @relation("userToEducation")
  experience Experience[] @relation("userToExperience")
  skills String[]
  socialLinks Json?
  userId String @db.ObjectId @unique
  user User @relation("userToUserProfile",fields: [userId], references: [id]  , onDelete: Cascade , onUpdate: Cascade)
  groupMessage GroupMessage[] @relation("userProfileToGroupMessage")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Education{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    school String
    degree String
    fieldOfStudy String
    startYear Int
    endYear Int
    grade String
    userProfileId String @db.ObjectId 
    UserProfile UserProfile @relation("userToEducation",fields: [userProfileId], references: [id] , onDelete: Cascade , onUpdate: Cascade) 
}

model Experience{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    company String
    title String
    location String
    startDate DateTime
    endDate DateTime
    description String
    userProfileId String @db.ObjectId
    UserProfile UserProfile @relation("userToExperience",fields: [userProfileId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
}

model Moderator{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToModerator",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    categoryIds String[] @db.ObjectId
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BusinessAdmin{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToBusinessAdmin",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    business business[] @relation("userToBusinessAdmin")
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// this representative may have relation with business admin.
model Representative{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    department String
    message String
    isVerified Boolean @default(false)
    businessId String @db.ObjectId
    Business business @relation("businessToRepresentative",fields: [businessId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    userId String @db.ObjectId @unique  
    user User @relation("userToRepresentative",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    representativePageFollower RepresentativePageFollower[] @relation("representativeToRepresentativePageFollower")
    booking Booking[] @relation("representativeToBooking")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// business registration model
model business{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    authorizedUser Boolean @default(false)
    businessName String @unique
    slogan String
    mission String
    industry String
    isIsp Boolean @default(false)
    products String[]
    services String[]
    companyType String
    foundedYear String
    history String
    hqLocation Json?
    servingAreas String[]
    keyPeople String[]
    ownership String[]
    lastYearRevenue String
    employeeCount  Int @default(0)
    acquisitions String[]
    strategicPartners String[]
    saleDeckUrl String?
    websiteLinks String[]
    accountOwnerUsername String
    
    businessAdminId String @db.ObjectId
    BusinessAdmin BusinessAdmin @relation("userToBusinessAdmin",fields: [businessAdminId], references: [id])

    businessCategoryId String @db.ObjectId
    BusinessCategory BusinessCategory @relation("businessToBusinessCategory",fields: [businessCategoryId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    groupChat GroupChat? @relation("businessToGroupChat")
    representative Representative[] @relation("businessToRepresentative")
    businessPageFollower BusinessPageFollower[] @relation("business to businessPageFollowers")
    post Post[] @relation("businessToPost")

}

model BusinessCategory{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    description String
    business business[] @relation("businessToBusinessCategory")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Admin{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToAdmin",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// forum models
model Forum{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    author String
    comments Int @default(0)
    categoryId String @db.ObjectId
    userId String @db.ObjectId
    user User @relation("userToForum",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    Categories Categories @relation("forumToCategory",fields: [categoryId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    topics Topic[] @relation("forumToTopic")


    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Topic{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    content String
    author String
    views Int @default(0)
    forumId String @db.ObjectId
    Forum Forum @relation("forumToTopic",fields: [forumId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    comments Comment[] @relation("topicToComment")
    flaggedContent FlaggedContent[] @relation("topicToFlaggedContent")
    reactions Reactions[] @relation("topicToReactions")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Comment{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    comment String
    author String
    topicId String? @db.ObjectId
    commenterId String? @db.ObjectId
    Topic Topic? @relation("topicToComment",fields: [topicId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    postId String? @db.ObjectId
    post Post? @relation("postToComment" , fields: [postId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    flaggedContent FlaggedContent[] @relation("commentToFlaggedContent")
    reactions Reactions[] @relation("commentToReactions")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Categories{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    description String
    icon String?
    membership_access String[] @db.ObjectId
    forums Forum[] @relation("forumToCategory")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// announcement model(inside forum)
model Announcement{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// poll model(inside forum)
model Poll{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    question String 
    options String[]
    pollAnalytics PollAnalytics? @relation("pollToPollAnalytics")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// poll analytics model
model PollAnalytics{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    pollId String @db.ObjectId @unique
    votes Int[] @default([])
    Poll Poll @relation("pollToPollAnalytics",fields: [pollId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// events model(inside forum)
model Event{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    date DateTime

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// notification model
model Notification{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    type String
    message String
    recipient String @db.ObjectId
    sender String @db.ObjectId

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// membership models
model MembershipPlan{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    description String
    price Float
    billingCycle String
    features String[]
    userMembership userMembership[] @relation("membershipToUserMembership")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model userMembership{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    membershipPlanId String @db.ObjectId
    startDate DateTime
    endDate DateTime
    status String? @default("active")
    User User @relation("userToUserMembership",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    MembershipPlan MembershipPlan @relation("membershipToUserMembership",fields: [membershipPlanId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    paymentRecord paymentRecord[] @relation("userMembershipToPaymentRecord")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model paymentRecord{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userMembershipId String @db.ObjectId
    amount Float
    paymentMethod String
    status String
    transactionId String @unique
    UserMembership userMembership @relation("userMembershipToPaymentRecord",fields: [userMembershipId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// content flagging model
model FlaggedContent{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    flaggedBy String @db.ObjectId
    contentType String
    reason String
    isDeleted Boolean? @default(false)
    categoryId String? @db.ObjectId
    topicId String? @db.ObjectId 
    topic Topic? @relation("topicToFlaggedContent",fields: [topicId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    commentId String? @db.ObjectId
    comment Comment? @relation("commentToFlaggedContent",fields: [commentId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    userId String? @db.ObjectId
    user User? @relation("userToFlaggedContent",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

//Business Page followers model
model BusinessPageFollower{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    businessId String @db.ObjectId
    business business @relation("business to businessPageFollowers" , fields: [businessId] , references: [id], onDelete: Cascade , onUpdate: Cascade)
    userId String @db.ObjectId
    user User @relation("userToBusinessPageFollower", fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Representative page followers model
model RepresentativePageFollower{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    representativeId String @db.ObjectId
    representative Representative @relation("representativeToRepresentativePageFollower", fields: [representativeId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    userId String @db.ObjectId
    user User @relation("userToRepresentativePageFollower", fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// one to one message model
model Message{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    senderId String @db.ObjectId
    recipientId String @db.ObjectId
    content String
    read Boolean @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// group chat

model GroupChat{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    name String
    businessId String @db.ObjectId @unique

    Business business @relation("businessToGroupChat", fields: [businessId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    groupMessages GroupMessage[] @relation("groupToGroupMessages")
    groupMembers GroupMembers[] @relation("groupToGroupMembers")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GroupMessage{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    senderId String @db.ObjectId
    content String

    user User @relation("userToGroupMessage", fields: [senderId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    userProfile UserProfile @relation("userProfileToGroupMessage", fields: [senderId], references: [userId], onDelete: Cascade , onUpdate: Cascade)

    groupChatId String @db.ObjectId
    GroupChat GroupChat @relation("groupToGroupMessages", fields: [groupChatId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model GroupMembers{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId

    groupChatId String @db.ObjectId
    GroupChat GroupChat @relation("groupToGroupMembers", fields: [groupChatId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// reactions
model Reactions{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId
    contentType ContentType 
    reactionType ReactionType 
    topicId String? @db.ObjectId
    commentId String? @db.ObjectId
    postId String? @db.ObjectId
    Topic Topic? @relation("topicToReactions", fields: [topicId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    Comment Comment? @relation("commentToReactions", fields: [commentId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    Post Post? @relation("postToReactions", fields: [postId], references: [id], onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


// bookings model
model Booking{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    availableDate DateTime
    booked Boolean @default(false)
    userId String? @db.ObjectId
    user User? @relation("userToBooking", fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)

    representativeId String @db.ObjectId
    representative Representative @relation("representativeToBooking", fields: [representativeId], references : [id], onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// post model (can be created by business admin or representative)
model Post{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    title String
    description String
    businessId String @db.ObjectId
    Business business @relation("businessToPost", fields: [businessId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    userId String @db.ObjectId
    User User @relation("userToPost", fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    media Media[] @relation("postToMedia")
    comments Comment[] @relation("postToComment")
    reactions Reactions[] @relation("postToReactions")
    sharedPosts SharedPost[] @relation("postToSharedPost")
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// shared posts
model SharedPost{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    postId String @db.ObjectId
    Post Post @relation("postToSharedPost", fields: [postId], references: [id], onDelete: Cascade , onUpdate: Cascade)
    userId String @db.ObjectId
    user User @relation("userToSharedPost", fields: [userId], references: [id], onDelete: Cascade , onUpdate: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}


model Media{
    fileId String @id @default(uuid()) @map("_id")
    name String
    url String
    thumbnailUrl String?
    fileType String?

    postId String? @db.ObjectId
    Post Post? @relation("postToMedia", fields: [postId], references: [id], onDelete: Cascade , onUpdate: Cascade)
}

datasource db {
    provider = "mongodb"
    url      = env("db_url")
}

generator client {
    provider = "prisma-client-js"
}


enum ROLE{
    USER
    ADMIN
    MODERATOR
    REPRESENTATIVE
    BUSINESS_ADMIN
}

model User{
    id      String   @id @default(auto()) @map("_id") @db.ObjectId
    fullName    String
    email   String   @unique
    password String
    role    ROLE @default(USER)
    phone   String
    userProfile UserProfile? @relation("userToUserProfile")
    representative Representative? @relation("userToRepresentative")
    businessAdmin BusinessAdmin? @relation("userToBusinessAdmin")
    moderator Moderator? @relation("userToModerator")
    admin Admin? @relation("userToAdmin")

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// user model
model UserProfile {
  id      String   @id @default(auto()) @map("_id") @db.ObjectId
  fullName    String
  email   String   @unique
  password String
  phone   String
  headLine String
  location String
  about   String?
  profileImageUrl String?
  education Education[]  @relation("userToEducation")
  experience Experience[] @relation("userToExperience")
  skills String[]
  socialLinks Json?
  userId String @db.ObjectId @unique
  user User @relation("userToUserProfile",fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Education{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    school String
    degree String
    fieldOfStudy String
    startYear Int
    endYear Int
    grade String
    userProfileId String @db.ObjectId @unique
    UserProfile UserProfile @relation("userToEducation",fields: [userProfileId], references: [id] , onDelete: Cascade , onUpdate: Cascade) 
}

model Experience{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    company String
    title String
    location String
    startDate DateTime
    endDate DateTime
    description String
    userProfileId String @db.ObjectId
    UserProfile UserProfile @relation("userToExperience",fields: [userProfileId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
}

model Moderator{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToModerator",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model BusinessAdmin{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToBusinessAdmin",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Representative{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique  
    user User @relation("userToRepresentative",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Admin{
    id String @id @default(auto()) @map("_id") @db.ObjectId
    userId String @db.ObjectId @unique
    user User @relation("userToAdmin",fields: [userId], references: [id] , onDelete: Cascade , onUpdate: Cascade)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}